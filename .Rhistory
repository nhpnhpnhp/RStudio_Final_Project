confirmed = Confirmed,
deaths = Deaths,
recovered = Recovered,
active = Active,
new_cases = `New cases`,
new_deaths = `New deaths`,
new_recovered = `New recovered`,
deaths_per_100_cases = `Deaths / 100 Cases`,
recovered_per_100_cases = `Recovered / 100 Cases`,
deaths_per_100_recovered = `Deaths / 100 Recovered`,
no_of_countries = `No. of countries`
) %>%
mutate(
confirmed = if_else(is.na(confirmed), 0, as.numeric(confirmed)),
deaths = if_else(is.na(deaths), 0, as.numeric(deaths)),
recovered = if_else(is.na(recovered), 0, as.numeric(recovered)),
active = if_else(is.na(active), 0, as.numeric(active)),
new_cases = if_else(is.na(new_cases), 0, as.numeric(new_cases)),
new_deaths = if_else(is.na(new_deaths), 0, as.numeric(new_deaths)),
new_recovered = if_else(is.na(new_recovered), 0, as.numeric(new_recovered)),
deaths_per_100_cases = if_else(is.na(deaths_per_100_cases), 0, as.numeric(deaths_per_100_cases)),
recovered_per_100_cases = if_else(is.na(recovered_per_100_cases), 0, as.numeric(recovered_per_100_cases)),
deaths_per_100_recovered = if_else(is.na(deaths_per_100_recovered), 0, as.numeric(deaths_per_100_recovered)),
no_of_countries = if_else(is.na(no_of_countries), 0, as.numeric(no_of_countries))
) %>%
mutate(
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths),
recovered = as.numeric(recovered),
active = as.numeric(active),
new_cases = as.numeric(new_cases),
new_deaths = as.numeric(new_deaths),
new_recovered = as.numeric(new_recovered),
deaths_per_100_cases = as.numeric(deaths_per_100_cases),
recovered_per_100_cases = as.numeric(recovered_per_100_cases),
deaths_per_100_recovered = as.numeric(deaths_per_100_recovered),
no_of_countries = as.numeric(no_of_countries)
) %>%
print("Tên cột sau khi làm sạch:")
arrange(date)
library(ggplot2)      # Để vẽ biểu đồ
library(prophet)      # Để phân tích chuỗi thời gian và dự đoán
library(lubridate)    # Để xử lý định dạng ngày tháng
# Tải các thư viện
library(tidyverse)    # Để xử lý và trực quan hóa dữ liệu
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data1 %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Vẽ biểu đồ đường
trend_plot <- ggplot(trend_data, aes(x = date, y = value, color = metric)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Xu hướng toàn cầu của COVID-19 (Ca nhiễm, Tử vong, Hồi phục)",
x = "Ngày",
y = "Số ca",
color = "Chỉ số"
) +
theme_minimal() +
scale_color_manual(values = c("confirmed" = "blue", "deaths" = "red", "recovered" = "green"))
# Hiển thị biểu đồ
print(trend_plot)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
# Bước 3: Vẽ biểu đồ xu hướng toàn cầu
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data1 %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Vẽ biểu đồ đường
trend_plot <- ggplot(trend_data, aes(x = date, y = value, color = metric)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Xu hướng toàn cầu của COVID-19 (Ca nhiễm, Tử vong, Hồi phục)",
x = "Ngày",
y = "Số ca",
color = "Chỉ số"
) +
theme_minimal() +
scale_color_manual(values = c("confirmed" = "#4DA8DA", "deaths" = "#F0544F", "recovered" = "#90EE90"))
# Hiển thị biểu đồ
print(trend_plot)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
# Bước 3: Vẽ biểu đồ xu hướng toàn cầu
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data1 %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Vẽ biểu đồ đường
trend_plot <- ggplot(trend_data, aes(x = date, y = value, color = metric)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Xu hướng toàn cầu của COVID-19 (Ca nhiễm, Tử vong, Hồi phục)",
x = "Ngày",
y = "Số ca",
color = "Chỉ số"
) +
theme_minimal() +
scale_color_manual(values = c("confirmed" = "#00FFFF", "deaths" = "#FFFF00", "recovered" = "#FFFFFF")) +
theme(panel.background = element_rect(fill = "black"))
# Hiển thị biểu đồ
print(trend_plot)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
# Bước 3: Vẽ biểu đồ xu hướng toàn cầu
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data1 %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Vẽ biểu đồ đường
trend_plot <- ggplot(trend_data, aes(x = date, y = value, color = metric)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Xu hướng toàn cầu của COVID-19 (Ca nhiễm, Tử vong, Hồi phục)",
x = "Ngày",
y = "Số ca",
color = "Chỉ số"
) +
theme_minimal() +
scale_color_manual(values = c("confirmed" = "blue", "deaths" = "red", "recovered" = "green"))
# Hiển thị biểu đồ
print(trend_plot)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
growth_data <- cleaned_data1 %>%
mutate(
# Tỷ lệ tăng trưởng hàng ngày (%)
growth_rate_confirmed = (new_cases / lag(confirmed, default = confirmed[1])) * 100,
growth_rate_deaths = (new_deaths / lag(deaths, default = deaths[1])) * 100,
growth_rate_recovered = (new_recovered / lag(recovered, default = recovered[1])) * 100
) %>%
select(date, new_cases, new_deaths, new_recovered, growth_rate_confirmed, growth_rate_deaths, growth_rate_recovered)
print("Chỉ số tăng trưởng (6 dòng đầu tiên):")
print(head(growth_data))
print("Chỉ số tăng trưởng (6 dòng đầu tiên):")
write_csv(growth_data, "growth_metrics.csv")
View(growth_data)
# Phân tích tính mùa vụ bằng biểu đồ số ca mới hàng ngày
seasonality_plot <- ggplot(cleaned_data1, aes(x = date, y = new_cases)) +
geom_line(color = "blue") +
geom_vline(xintercept = as.Date(c("2020-01-30", "2020-02-05")), linetype = "dashed", color = "red") +
annotate("text", x = as.Date("2020-02-01"), y = max(cleaned_data1$new_cases) * 0.9,
label = "Tết Nguyên Đán", color = "red") +
labs(
title = "Số ca mới hàng ngày và dịp Tết Nguyên Đán",
x = "Ngày",
y = "Số ca mới"
) +
theme_minimal()
# Hiển thị biểu đồ
print(seasonality_plot)
# Lưu biểu đồ
ggsave("seasonality_plot.png", seasonality_plot, width = 10, height = 6)
tet_data <- cleaned_data1 %>%
filter(date >= as.Date("2020-01-30") & date <= as.Date("2020-02-05")) %>%
select(date, new_cases, new_deaths, new_recovered)
print("Số ca trong thời kỳ Tết Nguyên Đán:")
print(tet_data)
View(trend_data)
View(tet_data)
# Chuyển dữ liệu sang định dạng dài (long format) để vẽ nhiều đường trên cùng một biểu đồ
trend_data <- cleaned_data1 %>%
select(date, confirmed, deaths, recovered) %>%
pivot_longer(cols = c(confirmed, deaths, recovered), names_to = "metric", values_to = "value")
# Vẽ biểu đồ đường
trend_plot <- ggplot(trend_data, aes(x = date, y = value, color = metric)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Xu hướng toàn cầu của COVID-19 (Ca nhiễm, Tử vong, Hồi phục)",
x = "Ngày",
y = "Số ca",
color = "Chỉ số"
) +
theme_minimal() +
scale_color_manual(values = c("confirmed" = "blue", "deaths" = "red", "recovered" = "green"))
# Hiển thị biểu đồ
print(trend_plot)
# Lưu biểu đồ
ggsave("global_trend_plot.png", trend_plot, width = 10, height = 6)
growth_data <- cleaned_data1 %>%
mutate(
# Tỷ lệ tăng trưởng hàng ngày (%)
growth_rate_confirmed = (new_cases / lag(confirmed, default = confirmed[1])) * 100,
growth_rate_deaths = (new_deaths / lag(deaths, default = deaths[1])) * 100,
growth_rate_recovered = (new_recovered / lag(recovered, default = recovered[1])) * 100
) %>%
select(date, new_cases, new_deaths, new_recovered, growth_rate_confirmed, growth_rate_deaths, growth_rate_recovered)
# Kiểm tra chỉ số tăng trưởng
print("Chỉ số tăng trưởng (6 dòng đầu tiên):")
print(head(growth_data))
# Lưu chỉ số tăng trưởng vào file CSV
write_csv(growth_data, "growth_metrics.csv")
# Phân tích tính mùa vụ bằng biểu đồ số ca mới hàng ngày
seasonality_plot <- ggplot(cleaned_data1, aes(x = date, y = new_cases)) +
geom_line(color = "blue") +
geom_vline(xintercept = as.Date(c("2020-01-30", "2020-02-05")), linetype = "dashed", color = "red") +
annotate("text", x = as.Date("2020-02-01"), y = max(cleaned_data1$new_cases) * 0.9,
label = "Tết Nguyên Đán", color = "red") +
labs(
title = "Số ca mới hàng ngày và dịp Tết Nguyên Đán",
x = "Ngày",
y = "Số ca mới"
) +
theme_minimal()
# Hiển thị biểu đồ
print(seasonality_plot)
ggsave("seasonality_plot.png", seasonality_plot, width = 10, height = 6)
# Kiểm tra số ca mới trong thời kỳ Tết (30/01/2020 - 05/02/2020)
tet_data <- cleaned_data1 %>%
filter(date >= as.Date("2020-01-30") & date <= as.Date("2020-02-05")) %>%
select(date, new_cases, new_deaths, new_recovered)
print("Số ca trong thời kỳ Tết Nguyên Đán:")
print(tet_data)
# Chuẩn bị dữ liệu cho Prophet
prophet_data <- cleaned_data1 %>%
select(ds = date, y = confirmed)
# Tạo dataframe cho dịp Tết Nguyên Đán
holidays <- data.frame(
holiday = "Tet",
ds = as.Date(c("2020-01-30", "2020-01-31", "2020-02-01", "2020-02-02",
"2020-02-03", "2020-02-04", "2020-02-05")),
lower_window = 0,
upper_window = 0
)
View(trend_plot)
View(trend_data)
View(tet_data)
View(seasonality_plot)
View(prophet_data)
View(holidays)
# Khởi tạo và huấn luyện mô hình Prophet
model <- prophet(
prophet_data,
holidays = holidays,
yearly.seasonality = TRUE,
weekly.seasonality = TRUE,
daily.seasonality = TRUE
)
# Tạo dataframe cho dự đoán 7 ngày tiếp theo
future <- make_future_dataframe(model, periods = 7)
# Dự đoán
forecast <- predict(model, future)
View(forecast)
print("Dự đoán 7 ngày cuối:")
print(tail(forecast %>% select(ds, yhat, yhat_lower, yhat_upper), 7))
# Vẽ biểu đồ dự đoán
prophet_plot <- plot(model, forecast) +
labs(title = "Dự đoán số ca nhiễm toàn cầu với Prophet", x = "Ngày", y = "Số ca nhiễm") +
theme_minimal()
print(prophet_plot)
ggsave("prophet_forecast_plot.png", prophet_plot, width = 10, height = 6)
write_csv(cleaned_data1, "cleaned_day_wise.csv")
# Hiển thị 6 dòng đầu tiên của dữ liệu đã làm sạch
print("Dữ liệu đã làm sạch (6 dòng đầu):")
print(head(cleaned_data1))
# Tải các thư viện cần thiết
library(tidyverse)
library(caret)
library(prophet)
library(cluster)
library(randomForest)
# Tải các thư viện cần thiết
install.packages("randomForest")
library(randomForest)
train_models <- function() {
# --- 1. Regression: Dự đoán số ca nhiễm mới (New cases) ---
data_reg <- read_csv("output/full_grouped_with_features.csv")
data_reg <- read_csv("output/full_grouped_with_features.csv")
# Hàm huấn luyện và lưu các mô hình
train_models <- function() {
# --- 1. Regression: Dự đoán số ca nhiễm mới (New cases) ---
data_reg <- read_csv("output/full_grouped_with_features.csv")
train_models <- function() {
# --- 1. Regression: Dự đoán số ca nhiễm mới (New cases) ---
data_reg <- read_csv("output/full_grouped_with_features.csv")
view(data_reg)
# Chuẩn bị dữ liệu: loại bỏ NA và giá trị bất thường
data_reg <- data_reg %>%
filter(!is.na(`New cases`) & !is.na(Growth_Rate) & !is.na(Death_Rate) & !is.na(Recovery_Rate) & !is.na(Rolling_Mean)) %>%
filter(is.finite(Growth_Rate) & is.finite(Death_Rate) & is.finite(Recovery_Rate) & is.finite(Rolling_Mean)) %>%
select(`New cases`, Growth_Rate, Death_Rate, Recovery_Rate, Rolling_Mean)
# Chia dữ liệu thành tập huấn luyện (80%) và kiểm tra (20%)
set.seed(123)
trainIndex_reg <- createDataPartition(data_reg$`New cases`, p = 0.8, list = FALSE)
train_data_reg <- data_reg[trainIndex_reg, ]
test_data_reg <- data_reg[-trainIndex_reg, ]
# Huấn luyện mô hình hồi quy tuyến tính
regression_model <- lm(`New cases` ~ Growth_Rate + Death_Rate + Recovery_Rate + Rolling_Mean, data = train_data_reg)
# Dự đoán và đánh giá
predictions_reg <- predict(regression_model, newdata = test_data_reg)
rmse_reg <- sqrt(mean((test_data_reg$`New cases` - predictions_reg)^2))
r2_reg <- cor(test_data_reg$`New cases`, predictions_reg)^2
cat("Regression - RMSE:", rmse_reg, "\n")
cat("Regression - R-squared:", r2_reg, "\n")
# Lưu mô hình
saveRDS(regression_model, "output/regression_model.rds")
regression_model <- readRDS("output/regression_model.rds")
# Lưu dự đoán
test_data_reg <- test_data_reg %>%
mutate(Predicted_New_cases = predictions_reg)
write_csv(test_data_reg, "output/regression_predictions.csv")
# --- 2. Time Series: Dự đoán xu hướng ca nhiễm mới ---
data_ts <- read_csv("output/full_grouped_with_features.csv") %>%
group_by(Date) %>%
summarise(y = sum(`New cases`, na.rm = TRUE)) %>%
rename(ds = Date)
# Huấn luyện mô hình Prophet
prophet_model <- prophet()
prophet_model <- add_country_holidays(prophet_model, country_name = 'US')
prophet_model <- fit.prophet(prophet_model, data_ts)
# Dự đoán 30 ngày tới
future <- make_future_dataframe(prophet_model, periods = 30)
forecast <- predict(prophet_model, future)
# Lưu mô hình
saveRDS(prophet_model, "output/prophet_model.rds")
write_csv(forecast, "output/prophet_forecast.csv")
# --- 3. Clustering: Phân cụm quốc gia ---
data_cluster <- read_csv("output/worldometer_with_features.csv") %>%
filter(!is.na(Death_Rate) & !is.na(Test_Rate)) %>%
select(Death_Rate, Test_Rate)
# Chuẩn hóa dữ liệu
data_cluster_scaled <- scale(data_cluster)
# Huấn luyện mô hình K-Means (3 cụm)
set.seed(123)
kmeans_model <- kmeans(data_cluster_scaled, centers = 3, nstart = 25)
# Thêm nhãn cụm vào dữ liệu gốc
data_cluster <- read_csv("output/worldometer_with_features.csv") %>%
mutate(Cluster = as.factor(kmeans_model$cluster))
# Lưu mô hình và dữ liệu phân cụm
saveRDS(kmeans_model, "output/kmeans_model.rds")
write_csv(data_cluster, "output/clustered_data.csv")
# --- 4. Classification: Phân loại quốc gia nguy cơ cao/thấp ---
data_class <- read_csv("output/worldometer_with_features.csv") %>%
filter(!is.na(Death_Rate) & !is.na(Test_Rate)) %>%
mutate(Risk_Level = as.factor(ifelse(Death_Rate > 5, "High", "Low"))) %>%
select(Risk_Level, TotalCases, TotalDeaths, TotalTests, Population, Death_Rate, Test_Rate)
# Chia dữ liệu
set.seed(123)
trainIndex_class <- createDataPartition(data_class$Risk_Level, p = 0.8, list = FALSE)
train_data_class <- data_class[trainIndex_class, ]
test_data_class <- data_class[-trainIndex_class, ]
# Huấn luyện mô hình Random Forest
rf_model <- randomForest(Risk_Level ~ TotalCases + TotalDeaths + TotalTests + Population + Death_Rate + Test_Rate,
data = train_data_class, ntree = 100)
# Dự đoán và đánh giá
predictions_class <- predict(rf_model, test_data_class)
confusionMatrix(predictions_class, test_data_class$Risk_Level)
# Lưu mô hình
saveRDS(rf_model, "output/rf_model.rds")
# Lưu dự đoán
test_data_class <- test_data_class %>%
mutate(Predicted_Risk_Level = predictions_class)
write_csv(test_data_class, "output/classification_predictions.csv")
# Trả về danh sách các mô hình
return(list(
regression_model = regression_model,
prophet_model = prophet_model,
kmeans_model = kmeans_model,
rf_model = rf_model
))
}
# Thực thi hàm
models <- train_models()
library(readr)
#5. Bước 4: Áp dụng mô hình ML
# Tải các thư viện cần thiết
install.packages("randomForest")
library(tidyverse)
library(caret)
library(prophet)
library(cluster)
library(randomForest)
library(readr)
library(ggplot2)
print(file.exists("output/full_grouped_with_features.csv"))
getwd()
setwd("D:/Đại học/TL-HOCKI2.2/TL_LT_R_CPT_QT/DoAn_R/FinalDataR/COVID19_Analysis")
# Hàm huấn luyện và lưu các mô hình
train_models <- function() {
# --- 1. Regression: Dự đoán số ca nhiễm mới (New cases) ---
data_reg <- read_csv("output/full_grouped_with_features.csv")
view(data_reg)
# Chuẩn bị dữ liệu: loại bỏ NA và giá trị bất thường
data_reg <- data_reg %>%
filter(!is.na(`New cases`) & !is.na(Growth_Rate) & !is.na(Death_Rate) & !is.na(Recovery_Rate) & !is.na(Rolling_Mean)) %>%
filter(is.finite(Growth_Rate) & is.finite(Death_Rate) & is.finite(Recovery_Rate) & is.finite(Rolling_Mean)) %>%
select(`New cases`, Growth_Rate, Death_Rate, Recovery_Rate, Rolling_Mean)
# Chia dữ liệu thành tập huấn luyện (80%) và kiểm tra (20%)
set.seed(123)
trainIndex_reg <- createDataPartition(data_reg$`New cases`, p = 0.8, list = FALSE)
train_data_reg <- data_reg[trainIndex_reg, ]
test_data_reg <- data_reg[-trainIndex_reg, ]
# Huấn luyện mô hình hồi quy tuyến tính
regression_model <- lm(`New cases` ~ Growth_Rate + Death_Rate + Recovery_Rate + Rolling_Mean, data = train_data_reg)
# Dự đoán và đánh giá
predictions_reg <- predict(regression_model, newdata = test_data_reg)
rmse_reg <- sqrt(mean((test_data_reg$`New cases` - predictions_reg)^2))
r2_reg <- cor(test_data_reg$`New cases`, predictions_reg)^2
cat("Regression - RMSE:", rmse_reg, "\n")
cat("Regression - R-squared:", r2_reg, "\n")
# Lưu mô hình
saveRDS(regression_model, "output/regression_model.rds")
regression_model <- readRDS("output/regression_model.rds")
# Lưu dự đoán
test_data_reg <- test_data_reg %>%
mutate(Predicted_New_cases = predictions_reg)
write_csv(test_data_reg, "output/regression_predictions.csv")
# --- 2. Time Series: Dự đoán xu hướng ca nhiễm mới ---
data_ts <- read_csv("output/full_grouped_with_features.csv") %>%
group_by(Date) %>%
summarise(y = sum(`New cases`, na.rm = TRUE)) %>%
rename(ds = Date)
# Huấn luyện mô hình Prophet
prophet_model <- prophet()
prophet_model <- add_country_holidays(prophet_model, country_name = 'US')
prophet_model <- fit.prophet(prophet_model, data_ts)
# Dự đoán 30 ngày tới
future <- make_future_dataframe(prophet_model, periods = 30)
forecast <- predict(prophet_model, future)
# Lưu mô hình
saveRDS(prophet_model, "output/prophet_model.rds")
write_csv(forecast, "output/prophet_forecast.csv")
# --- 3. Clustering: Phân cụm quốc gia ---
data_cluster <- read_csv("output/worldometer_with_features.csv") %>%
filter(!is.na(Death_Rate) & !is.na(Test_Rate)) %>%
select(Death_Rate, Test_Rate)
# Chuẩn hóa dữ liệu
data_cluster_scaled <- scale(data_cluster)
# Huấn luyện mô hình K-Means (3 cụm)
set.seed(123)
kmeans_model <- kmeans(data_cluster_scaled, centers = 3, nstart = 25)
# Thêm nhãn cụm vào dữ liệu gốc
data_cluster <- read_csv("output/worldometer_with_features.csv") %>%
mutate(Cluster = as.factor(kmeans_model$cluster))
# Lưu mô hình và dữ liệu phân cụm
saveRDS(kmeans_model, "output/kmeans_model.rds")
write_csv(data_cluster, "output/clustered_data.csv")
# --- 4. Classification: Phân loại quốc gia nguy cơ cao/thấp ---
data_class <- read_csv("output/worldometer_with_features.csv") %>%
filter(!is.na(Death_Rate) & !is.na(Test_Rate)) %>%
mutate(Risk_Level = as.factor(ifelse(Death_Rate > 5, "High", "Low"))) %>%
select(Risk_Level, TotalCases, TotalDeaths, TotalTests, Population, Death_Rate, Test_Rate)
# Chia dữ liệu
set.seed(123)
trainIndex_class <- createDataPartition(data_class$Risk_Level, p = 0.8, list = FALSE)
train_data_class <- data_class[trainIndex_class, ]
test_data_class <- data_class[-trainIndex_class, ]
# Huấn luyện mô hình Random Forest
rf_model <- randomForest(Risk_Level ~ TotalCases + TotalDeaths + TotalTests + Population + Death_Rate + Test_Rate,
data = train_data_class, ntree = 100)
# Dự đoán và đánh giá
predictions_class <- predict(rf_model, test_data_class)
confusionMatrix(predictions_class, test_data_class$Risk_Level)
# Lưu mô hình
saveRDS(rf_model, "output/rf_model.rds")
# Lưu dự đoán
test_data_class <- test_data_class %>%
mutate(Predicted_Risk_Level = predictions_class)
write_csv(test_data_class, "output/classification_predictions.csv")
# Trả về danh sách các mô hình
return(list(
regression_model = regression_model,
prophet_model = prophet_model,
kmeans_model = kmeans_model,
rf_model = rf_model
))
}
# Thực thi hàm
models <- train_models()
# Kiểm tra kết quả
print("Các mô hình đã được huấn luyện và lưu!")
knitr::opts_knit$set(root.dir = "D:/Đại học/TL-HOCKI2.2/TL_LT_R_CPT_QT/DoAn_R/FinalDataR/COVID19_Analysis")
library(tidyverse)
library(ggplot2)
library(reshape2)
library(prophet)
reg_predictions <- read_csv("output/regression_predictions.csv")
comparison_data <- reg_predictions %>%
select(`New cases`, Predicted_New_cases) %>%
pivot_longer(cols = c(`New cases`, Predicted_New_cases), names_to = "Type", values_to = "Value")
ggplot(comparison_data, aes(x = 1:nrow(comparison_data), y = Value, color = Type)) +
geom_line() +
labs(title = "So sánh giá trị thực tế và dự đoán (Regression)", x = "Observation", y = "New Cases") +
theme_minimal()
forecast <- read_csv("output/prophet_forecast.csv")
ggplot(forecast, aes(x = ds, y = yhat)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = yhat_lower, ymax = yhat_upper), alpha = 0.2) +
labs(title = "Dự đoán xu hướng ca nhiễm mới (Prophet)", x = "Date", y = "New Cases") +
theme_minimal()
clustered_data <- read_csv("output/clustered_data.csv")
ggplot(clustered_data, aes(x = Death_Rate, y = Test_Rate, color = Cluster)) +
geom_point() +
labs(title = "Phân cụm quốc gia theo Death_Rate và Test_Rate", x = "Death Rate (%)", y = "Test Rate (%)") +
theme_minimal()
class_predictions <- read_csv("output/classification_predictions.csv")
ggplot(class_predictions, aes(x = Risk_Level, fill = Predicted_Risk_Level)) +
geom_bar(position = "dodge") +
labs(title = "Phân loại nguy cơ cao/thấp", x = "Actual Risk Level", y = "Count", fill = "Predicted Risk Level") +
theme_minimal()
